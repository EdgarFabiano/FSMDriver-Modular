/**  @file: FSMDriver3.h
 *
 * https://github.com/bruno147/fsmdriver
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version. 
 */

#ifndef UNB_FSMDRIVER_FSMDRIVER3_H
#define UNB_FSMDRIVER_FSMDRIVER3_H

#include <vector>

#include "InsideTrack.h"
#include "OutOfTrack.h"
#include "Stuck.h"
#include "FSMDriver.h"

/*! \class FSMDriver3
*   \brief The driver itself.
*
*   This class defines the driver based on a FSM.
*
*   Please note that this documentation provide information about the espefic files of the newFSM driver,
*   the Loiacono's files(at src and include folder) have not been documented by us, for that reason the
*   Doxygen does not generate these files documentation, more information can be found at the own comments
*   of the code.
*/

class FSMDriver3 : public FSMDriver {
private:
    //! States.
    InsideTrack inside_track;
    OutOfTrack out_of_track;
    Stuck stuck;

public:
    //! Called when the driver finishes the race.
    virtual void onShutdown();
    //! Called when TORCS asks a race restart.
    virtual void onRestart();

    //! Initialization of the desired angles for the rangefinders
    virtual void init(float *angles);
    //! Empty constructor.
    FSMDriver3();
    //! Empty destructor
    virtual ~FSMDriver3();
    //! Transitions between states.
    /*!
    *   This method decides whenever the current state does not fit with
    *   the car status and needs to be changed.The transition choose the most fitted state at the moment of the race.
    *	\param cs a data structure cointaining information from the car's sensors.
    */
    void transition(CarState &cs);
};

#endif // FSMDriver3_H
